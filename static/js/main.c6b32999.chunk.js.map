{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","handleclick","value","Board","rendersquare","i","squares","clickact","this","Component","Game","history","state","length","calculateWinner","console","log","xisnext","setState","concat","stepNumber","Array","fill","status","current","winner","xIsNext","possibilities","a","b","c","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uOAGe,SAASA,EAAOC,GAC3B,OACI,4BAAQC,UAAU,SAAUC,QAASF,EAAMG,aAC5CH,EAAMI,O,ICFQC,E,4MAEjBC,aAAa,SAACC,GACV,OACI,kBAACR,EAAD,CAAQK,MAAO,EAAKJ,MAAMQ,QAAQD,GAAIJ,YAAa,kBAAI,EAAKH,MAAMS,SAASF,O,uDAQrF,OAAS,6BAEP,yBAAKN,UAAU,aACfS,KAAKJ,aAAa,GAClBI,KAAKJ,aAAa,GAClBI,KAAKJ,aAAa,IAIlB,yBAAKL,UAAU,aACdS,KAAKJ,aAAa,GAClBI,KAAKJ,aAAa,GAClBI,KAAKJ,aAAa,IAGnB,yBAAKL,UAAU,aACdS,KAAKJ,aAAa,GAClBI,KAAKJ,aAAa,GAClBI,KAAKJ,aAAa,S,GA9BYK,aCDdC,E,kDACjB,WAAYZ,GAAO,IAAD,8BACd,cAAMA,IAWdG,YAAY,SAACI,GACT,IAAMM,EAAQ,EAAKC,MAAMD,QAEnBL,EADQK,EAAQA,EAAQE,OAAS,GACjBP,QAEPQ,EAAgBR,IAElBA,EAAQD,GACjBU,QAAQC,IAAI,SAKhBV,EAAQD,GAAG,EAAKO,MAAMK,QAAQ,IAAI,IACjC,EAAKC,SAAS,CACXP,QAAQA,EAAQQ,OAAO,CACnBb,QAAQA,IAEZW,SAAS,EAAKL,MAAMK,QACpBG,WAAWT,EAAQE,WA7BnB,EAAKD,MAAM,CACPK,SAAQ,EACRG,WAAW,EACXT,QAAQ,CACJ,CAACL,QAAQe,MAAM,GAAGC,KAAK,SANjB,E,qDAoCT,IAQDC,EARA,OAKEC,EADQhB,KAAKI,MAAMD,QACHH,KAAKI,MAAMQ,YAI3BK,EAASX,EAAgBU,EAAQlB,SAS3C,OANMiB,EADCE,EACQ,YAAcA,EAEd,mBAAqBjB,KAAKI,MAAMc,QAAU,IAAM,KAK3D,yBAAK3B,UAAU,QACf,yBAAKA,UAAU,cACf,kBAAC,EAAD,CAAOQ,SAAW,SAACF,GAAD,OAAK,EAAKJ,YAAYI,IAAIC,QAASkB,EAAQlB,UAE7D,yBAAKP,UAAY,aACjB,6BAAMwB,U,GA7DoBd,aAsElC,SAASK,EAAiBR,GAYtB,IAXA,IAAMqB,EAAgB,CACpB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGDtB,EAAI,EAAGA,EAAIsB,EAAcd,OAAQR,IAAK,CAAC,IAAD,cAC1BsB,EAActB,GADY,GACrCuB,EADqC,KAClCC,EADkC,KAC/BC,EAD+B,KAE5C,GAAGxB,EAAQsB,IAAMtB,EAAQsB,KAAOtB,EAAQuB,IAAMvB,EAAQuB,KAAOvB,EAAQwB,GACnE,OAAOxB,EAAQsB,GAInB,OAAO,K,MClFIG,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,a","file":"static/js/main.c6b32999.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nexport default function Square(props){\r\n    return(\r\n        <button className=\"square\"  onClick={props.handleclick}>\r\n      {props.value}\r\n        </button>\r\n    )\r\n}","import React, { Component } from 'react'\r\nimport Square from './Square'\r\n\r\n\r\nexport default class Board extends Component  {\r\n\r\n    rendersquare=(i)=>{\r\n        return(\r\n            <Square value={this.props.squares[i]} handleclick={()=>this.props.clickact(i)}/>\r\n        )\r\n    }\r\n\r\nrender(){\r\n\r\n\r\n\r\n  return(  <div>\r\n\r\n    <div className=\"board-row\">\r\n   {this.rendersquare(0)}\r\n   {this.rendersquare(1)}\r\n   {this.rendersquare(2)}\r\n    </div>\r\n\r\n\r\n    <div className=\"board-row\">\r\n    {this.rendersquare(3)}\r\n    {this.rendersquare(4)}\r\n    {this.rendersquare(5)}\r\n    </div>\r\n\r\n    <div className=\"board-row\">\r\n    {this.rendersquare(6)}\r\n    {this.rendersquare(7)}\r\n    {this.rendersquare(8)}\r\n    </div>\r\n    \r\n    \r\n    \r\n    \r\n    </div>)\r\n}\r\n}\r\n","import React, { Component } from 'react'\r\nimport Board from './Board'\r\n\r\nexport default class Game extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            xisnext:true,\r\n            stepNumber:0,\r\n            history:[\r\n                {squares:Array(9).fill(null)},\r\n            ]\r\n            }\r\n    }\r\n\r\n\r\nhandleclick=(i)=>{\r\n    const history=this.state.history\r\n    const current=history[history.length - 1]\r\n    const squares=current.squares\r\n\r\n    const winner = calculateWinner(squares)\r\n\r\n    if(winner || squares[i]) {\r\n        console.log('won ');\r\n        \r\n      return\r\n    }\r\n\r\n    squares[i]=this.state.xisnext?'X':'O'\r\n     this.setState({\r\n        history:history.concat({\r\n            squares:squares\r\n        }),\r\n        xisnext:!this.state.xisnext,\r\n        stepNumber:history.length\r\n        \r\n    })\r\n}\r\n\r\n    render(){\r\n\r\n\r\n\r\n        const history=this.state.history\r\n        const current=history[this.state.stepNumber]\r\n        \r\n\r\n        let status\r\n        const winner = calculateWinner(current.squares)\r\n    \r\n        if(winner) {\r\n          status = 'Winner is' + winner\r\n        } else {\r\n          status = 'Next Player is ' + (this.state.xIsNext ? 'X' : 'O')\r\n        }\r\n\r\n        \r\n    return(\r\n        <div className=\"game\">\r\n        <div className='game-board'>\r\n        <Board clickact ={(i)=>this.handleclick(i)} squares={current.squares}/>\r\n\r\n        <div className = \"game-info\">\r\n        <div>{status}</div>\r\n      </div>\r\n    </div>\r\n\r\n</div>\r\n    )\r\n}\r\n}\r\n\r\nfunction calculateWinner (squares) {\r\n    const possibilities = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ]\r\n  \r\n    for(let i = 0; i < possibilities.length; i++) {\r\n      const [a, b, c] = possibilities[i]\r\n      if(squares[a] && squares[a] === squares[b] && squares[b] === squares[c]) {\r\n        return squares[a]\r\n      }\r\n    }\r\n  \r\n    return null\r\n  \r\n\r\n}","import React from 'react';\nimport Game from './components/Game'\nimport './App.css';\n\nfunction App() {\n  return (\n    <Game/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}